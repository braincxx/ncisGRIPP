# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from application.api import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, email: str=None, role: str=None):
        """User - a model defined in Swagger

        :param id: The id of this User.
        :type id: int
        :param name: The name of this User.
        :type name: str
        :param email: The email of this User.
        :type email: str
        :param role: The role of this User.
        :type role: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'email': str,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'email': 'email',
            'role': 'role'
        }
        self._id = id
        self._name = name
        self._email = email
        self._role = role

    @classmethod
    def from_dict(cls, attr_dict) -> 'User':
        """Returns the dict as a model

        :param attr_dict: A dict.
        :type: dict
        :return: The User of this User.
        :rtype: User
        """
        return util.deserialize_model(attr_dict, cls)

    @classmethod
    def from_persistence(cls, user):
        answer_status = "Not checked"

        return User(user.id, user.name, user.email, user.role)

    @property
    def id(self) -> int:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def role(self) -> str:
        """Gets the role of this User.


        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this User.


        :param role: The role of this User.
        :type role: str
        """
        allowed_values = ["Student", "Teacher"]
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
